#!/bin/bash

set -euo pipefail

export DLIB_VERSION="19.16"
export OPENCV_VERSION="4.0.1"

export SUCCEEDED=0
export FAILED=1
export IGNORED=2

main()
{
    if [[ "${1}" = "make-opencv" ]]; then
        opencv::install_library
    fi

    if [[ "${1}" = "make-dlib" ]]; then
        dlib::install_library
    fi

    if [[ "${1}" = "mvn-package" ]]; then
        dlib_java::package_project
    fi

    if [[ "${1}" = "java-jar" ]]; then
        dlib_java::exec_jar
    fi
}

info()
{
    echo "${@}..."
}


dlib::download_archive()
{
    declare library_folder_path="${1}"
    pushd "${library_folder_path}"
    if [[ ! -f "./dlib.zip" ]]; then
        wget "http://dlib.net/files/dlib-${DLIB_VERSION}.zip" -O "./dlib.zip"
        unzip -o "./dlib.zip"
    fi
    popd
}

opencv::configure()
{
  declare folder_path="${1}"

  declare cmake_options=(
    "-D WITH_OPENCL=ON"
    "-D WITH_OPENGL=ON"
    "-D WITH_TBB=ON"
    "-D WITH_XINE=ON"
    "-D WITH_GSTREAMER=OFF"
    "-D BUILD_WITH_DEBUG_INFO=OFF"
    "-D BUILD_TESTS=OFF"
    "-D BUILD_PERF_TESTS=OFF"
    "-D BUILD_EXAMPLES=ON"
    "-D INSTALL_C_EXAMPLES=ON"
    "-D INSTALL_PYTHON_EXAMPLES=ON"
    "-D CMAKE_BUILD_TYPE=Release"
    "-D CMAKE_SKIP_RPATH=ON"
    "-D CPU_BASELINE_DISABLE=SSE3"
    "-D CPU_BASELINE_REQUIRE=SSE2"
    "-D OPENCV_GENERATE_PKGCONFIG=ON"
  )
  pushd "${folder_path}/src/opencv-${OPENCV_VERSION}"
  mkdir -p "./build"
  pushd "./build"
  cmake \
    ${cmake_options[@]} \
    -DOPENCV_EXTRA_MODULES_PATH="../../opencv_contrib-${OPENCV_VERSION}/modules" \
    -DLAPACK_LIBRARIES="/usr/lib/liblapack.so;/usr/lib/libblas.so;/usr/lib/libcblas.so" \
    -DLAPACK_CBLAS_H="/usr/include/cblas.h" \
    -DLAPACK_LAPACKE_H="/usr/include/lapacke.h" \
    -DCMAKE_INSTALL_PREFIX="${folder_path}/usr" \
    -DCMAKE_INSTALL_LIBDIR="${folder_path}/usr/lib" \
    ".."
  popd
  popd
}

opencv::compile()
{
  declare folder_path="${1}"

  pushd "${folder_path}/src/opencv-${OPENCV_VERSION}/build"
  make
  popd
}

opencv::install()
{
  declare folder_path="${1}"

  pushd "${folder_path}/src/opencv-${OPENCV_VERSION}/build"
  make install
  popd

  pushd "${folder_path}/usr/share/java/opencv4"
  mvn install:install-file \
    -Dfile="./opencv-$(echo ${OPENCV_VERSION} | sed 's/\.//g').jar" \
    -DgroupId="opencv" \
    -DartifactId="opencv" -Dversion="${OPENCV_VERSION}" \
    -Dpackaging="jar"
  popd
}

opencv::install_library()
{
  declare folder_path="/tmp/opencv"

  mkdir -p "${folder_path}"
  mkdir "${folder_path}/src" || true
  mkdir "${folder_path}/usr" || true
  mkdir "${folder_path}/usr/lib" || true

  info "Downloading"
  opencv::download_archives "${folder_path}"

  info "Configuring"
  opencv::configure "${folder_path}"

  info "Compiling"
  opencv::compile "${folder_path}"

  info "Installing"
  opencv::install "${folder_path}"

  info "Checking"
  ls -alrt "${folder_path}/usr"
  ls -alrt "${folder_path}/usr/lib"

}

opencv::download_archives()
{
  declare folder_path="${1}"

  pushd "${folder_path}/src"
  if [[ ! -f "./opencv.zip" ]]; then
      wget "https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.tar.gz" \
        -O "./opencv.tar.gz"
      tar xf "./opencv.tar.gz"
  fi
  popd

  pushd "${folder_path}/src"
  if [[ ! -f "./opencv_contrib.zip" ]]; then
      wget "https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.tar.gz" \
        -O "./opencv_contrib.tar.gz"
      tar xf "./opencv_contrib.tar.gz"
  fi
  popd
}

# http://dlib.net/compile.html
# https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=dlib
# https://www.learnopencv.com/install-dlib-on-ubuntu/
dlib::install_library()
{
    declare library_folder_path="/tmp/dlib"

    info "Creating library folder"
    mkdir -p "${library_folder_path}/src"

    info "Downloading sources"
    dlib::download_archive "${library_folder_path}/src"

    info "Configuring CMake"
    pushd "${library_folder_path}/src/dlib-${DLIB_VERSION}/dlib"
    mkdir -p "./build"
    pushd "./build"
    cmake \
        -DCMAKE_INSTALL_PREFIX:PATH="${library_folder_path}/usr" \
        -DCMAKE_INSTALL_LIBDIR:PATH="${library_folder_path}/usr/lib" \
        -DBUILD_SHARED_LIBS:BOOL=ON \
        -DUSE_AVX_INSTRUCTIONS:BOOL=ON \
        -DUSE_SSE2_INSTRUCTIONS:BOOL=ON \
        -DUSE_SSE4_INSTRUCTIONS:BOOL=ON \
        -DCMAKE_BUILD_TYPE="Release" \
        ".."
    popd
    popd

    info "Compiling"
    pushd "${library_folder_path}/src/dlib-${DLIB_VERSION}/dlib/build"
    make
    popd

    info "Installing"
    pushd "${library_folder_path}/src/dlib-${DLIB_VERSION}/dlib/build"
    make install
    popd
}



dlib_java::package_project()
{
    PKG_CONFIG_PATH="/tmp/dlib/usr/lib/pkgconfig:/tmp/opencv/usr/lib/pkgconfig:$( pkg-config --variable pc_path "pkg-config" )" \
      mvn package
      #LIBRARY_PATH="/tmp/dlib/usr/lib:/tmp/opencv/usr/lib"
      #CPATH="/tmp/opencv/usr/include/opencv4:/tmp/dlib/usr/include/dlib"
}

dlib_java::exec_jar()
{
    LD_LIBRARY_PATH="/tmp/opencv/usr/lib/opencv4:/tmp/opencv/usr/share/java/opencv4:/tmp/dlib/usr/lib" java -jar "dlib/target/dlib-1.0-SNAPSHOT.jar" \
      "$( find . -name "lena.jpg" -print | head -n1 )"
}

main "${@}"
